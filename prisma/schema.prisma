// Prisma Schema for Tradely AI DeFi Platform
// Neon.tech Postgres Database - Enhanced Version

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  walletAddress String @unique
  email     String?  @unique
  username  String?  @unique
  avatar    String?
  preferences Json?   // User preferences (theme, notifications, etc.)
  tier      UserTier @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  portfolios Portfolio[]
  watchlists Watchlist[]
  alerts     Alert[]
  trades     Trade[]
  aiChats    AIChat[]
  strategies Strategy[]
  analytics  UserAnalytics?
  sessions   Session[]
  stateChannels StateChannel[]
  defiPositions DeFiPosition[]

  @@map("users")
}

enum UserTier {
  FREE
  PREMIUM
  PRO
}

// Session management for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Portfolio management
model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  totalValue  Float    @default(0)
  currency    String   @default("USD")
  visibility  PortfolioVisibility @default(PRIVATE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings   PortfolioHolding[]
  snapshots  PortfolioSnapshot[]
  
  @@map("portfolios")
}

enum PortfolioVisibility {
  PRIVATE
  PUBLIC
  SHARED
}

// Portfolio holdings with enhanced tracking
model PortfolioHolding {
  id           String   @id @default(cuid())
  portfolioId  String
  tokenSymbol  String
  tokenName    String
  tokenAddress String?  // Contract address for tokens
  network      String   @default("ethereum")
  amount       Float
  averagePrice Float    @default(0)
  currentPrice Float    @default(0)
  totalValue   Float    @default(0)
  allocation   Float    @default(0)
  profitLoss   Float    @default(0)
  profitLossPercent Float @default(0)
  firstPurchase DateTime?
  lastUpdated  DateTime  @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, tokenSymbol, network])
  @@map("portfolio_holdings")
}

// Portfolio performance snapshots
model PortfolioSnapshot {
  id          String   @id @default(cuid())
  portfolioId String
  totalValue  Float
  change24h   Float    @default(0)
  change7d    Float    @default(0)
  change30d   Float    @default(0)
  timestamp   DateTime @default(now())

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_snapshots")
}

// Watchlists for tracking assets
model Watchlist {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WatchlistItem[]

  @@map("watchlists")
}

model WatchlistItem {
  id          String   @id @default(cuid())
  watchlistId String
  symbol      String
  name        String
  type        AssetType
  isStarred   Boolean  @default(false)
  notes       String?
  alertsEnabled Boolean @default(false)
  addedAt     DateTime @default(now())

  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, symbol])
  @@map("watchlist_items")
}

enum AssetType {
  CRYPTO
  STOCK
  ETF
  FOREX
  COMMODITY
  INDEX
}

// Enhanced alerts system
model Alert {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  type        AlertType
  condition   Json      // Flexible condition storage
  targetValue Float?
  currentValue Float?
  symbol      String?
  isActive    Boolean   @default(true)
  isTriggered Boolean   @default(false)
  triggeredAt DateTime?
  notificationSent Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

enum AlertType {
  PRICE_ABOVE
  PRICE_BELOW
  PERCENT_CHANGE
  VOLUME_SPIKE
  RSI_OVERBOUGHT
  RSI_OVERSOLD
  SUPPORT_BREACH
  RESISTANCE_BREAK
  PORTFOLIO_VALUE
  CUSTOM
}

// Enhanced trade tracking
model Trade {
  id          String    @id @default(cuid())
  userId      String
  portfolioId String?   // Link trades to portfolios
  type        TradeType
  side        TradeSide
  fromSymbol  String?   // For swaps
  toSymbol    String    // Main symbol or target in swap
  fromAmount  Float?    // Amount sold/swapped
  toAmount    Float     // Amount bought/received
  price       Float     // Execution price
  totalValue  Float     // Total trade value
  fees        Float     @default(0)
  gasUsed     Float?    @default(0)
  gasFee      Float?    @default(0)
  txHash      String?   @unique
  blockNumber Int?
  exchange    String?
  network     String    @default("ethereum")
  status      TradeStatus @default(PENDING)
  executedAt  DateTime?
  batchId     String?   // For Nitrolite batch transactions
  metadata    Json?     // Additional trade data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

enum TradeType {
  BUY
  SELL
  SWAP
  TRANSFER_IN
  TRANSFER_OUT
  STAKE
  UNSTAKE
  YIELD_FARM
  LIQUIDITY_ADD
  LIQUIDITY_REMOVE
}

enum TradeSide {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
  PARTIAL
}

// AI Chat and insights
model AIChat {
  id        String   @id @default(cuid())
  userId    String
  sessionId String?  // Group related conversations
  type      ChatType @default(GENERAL)
  message   String
  response  String
  context   Json?    // Conversation context and metadata
  confidence Float?  // AI confidence score
  helpful   Boolean? // User feedback
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_chats")
}

enum ChatType {
  GENERAL
  PORTFOLIO_ANALYSIS
  MARKET_ANALYSIS
  RISK_ASSESSMENT
  STRATEGY_ADVICE
  TECHNICAL_ANALYSIS
}

// Market data cache with enhanced fields
model MarketData {
  id            String   @id @default(cuid())
  symbol        String   @unique
  name          String
  price         Float
  change24h     Float    @default(0)
  changePercent24h Float @default(0)
  volume24h     Float    @default(0)
  volumeChange24h Float  @default(0)
  marketCap     Float?
  marketCapRank Int?
  circulatingSupply Float?
  totalSupply   Float?
  high24h       Float?
  low24h        Float?
  ath           Float?   // All time high
  athDate       DateTime?
  atl           Float?   // All time low
  atlDate       DateTime?
  lastUpdate    DateTime @updatedAt
  createdAt     DateTime @default(now())

  // Technical indicators cache
  rsi           Float?
  sma20         Float?
  sma50         Float?
  ema12         Float?
  ema26         Float?
  bollUpper     Float?
  bollLower     Float?
  macdLine      Float?
  macdSignal    Float?

  @@map("market_data")
}

// Price history for charts
model PriceHistory {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  volume    Float    @default(0)
  marketCap Float?
  timestamp DateTime @default(now())

  @@unique([symbol, timestamp])
  @@index([symbol, timestamp])
  @@map("price_history")
}

// Trading strategies
model Strategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  type        StrategyType
  config      Json     // Strategy configuration
  isActive    Boolean  @default(false)
  isPublic    Boolean  @default(false)
  performance Json?    // Performance metrics
  backtest    Json?    // Backtesting results
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("strategies")
}

enum StrategyType {
  DCA
  GRID
  MOMENTUM
  MEAN_REVERSION
  ARBITRAGE
  YIELD_FARMING
  CUSTOM
}

// User analytics and insights
model UserAnalytics {
  id            String   @id @default(cuid())
  userId        String   @unique
  totalTrades   Int      @default(0)
  totalVolume   Float    @default(0)
  totalFees     Float    @default(0)
  totalPnl      Float    @default(0)
  winRate       Float    @default(0)
  avgTradeSize  Float    @default(0)
  favoriteAssets Json?   // Most traded assets
  tradingHours  Json?    // Peak trading hours
  riskProfile   Json?    // Risk assessment data
  lastActive    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

// Nitrolite state channel data
model StateChannel {
  id            String        @id @default(cuid())
  userId        String
  channelId     String        @unique
  counterparty  String
  status        ChannelStatus @default(OPENING)
  balance       Float         @default(0)
  token         String        @default("ETH")
  network       String        @default("ethereum")
  expiresAt     DateTime?
  metadata      Json?         // Channel metadata
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("state_channels")
}

enum ChannelStatus {
  OPENING
  OPEN
  SETTLING
  SETTLED
  DISPUTED
  CLOSED
}

// DeFi protocol integrations
model DeFiProtocol {
  id          String   @id @default(cuid())
  name        String   @unique
  protocol    String   // Protocol identifier
  network     String
  category    ProtocolCategory
  tvl         Float?   // Total Value Locked
  apy         Float?   // Current APY
  risk        RiskLevel @default(MEDIUM)
  isActive    Boolean  @default(true)
  metadata    Json?    // Protocol-specific data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  positions DeFiPosition[]

  @@map("defi_protocols")
}

enum ProtocolCategory {
  LENDING
  DEX
  YIELD_FARMING
  STAKING
  INSURANCE
  BRIDGE
  OTHER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

// DeFi positions tracking
model DeFiPosition {
  id          String   @id @default(cuid())
  userId      String
  protocolId  String
  positionId  String   // Protocol-specific position ID
  type        String   // Position type (stake, lend, provide liquidity, etc.)
  asset       String   // Main asset
  amount      Float    // Amount in position
  value       Float    // USD value
  apy         Float?   // Current APY/APR
  rewards     Float    @default(0)
  claimable   Float    @default(0)
  entryPrice  Float?
  currentPrice Float?
  metadata    Json?    // Position-specific data
  isActive    Boolean  @default(true)
  enteredAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  protocol DeFiProtocol @relation(fields: [protocolId], references: [id])

  @@unique([userId, protocolId, positionId])
  @@map("defi_positions")
}

// News and sentiment data
model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  content     String?
  summary     String?
  source      String
  author      String?
  url         String   @unique
  imageUrl    String?
  sentiment   Float?   // Sentiment score (-1 to 1)
  relevantSymbols Json? // Array of relevant crypto symbols
  category    NewsCategory @default(GENERAL)
  publishedAt DateTime
  createdAt   DateTime @default(now())

  @@index([publishedAt])
  @@map("news_articles")
}

enum NewsCategory {
  GENERAL
  BITCOIN
  ETHEREUM
  ALTCOINS
  DEFI
  NFTS
  REGULATION
  ADOPTION
  TECHNICAL
}

// System configuration
model Config {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  isPublic  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("config")
}

// API rate limiting and usage tracking
model ApiUsage {
  id        String   @id @default(cuid())
  userId    String?
  endpoint  String
  method    String
  requests  Int      @default(0)
  window    DateTime // Rate limit window start
  createdAt DateTime @default(now())

  @@unique([userId, endpoint, method, window])
  @@index([window])
  @@map("api_usage")
}
